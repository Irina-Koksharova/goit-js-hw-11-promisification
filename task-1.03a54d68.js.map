{"version":3,"sources":["js/task-1.js"],"names":["delay","ms","time","Promise","resolve","reject","setTimeout","logger","console","log","then"],"mappings":";;;AAkBA,aAlBA,QAAA,qBAKA,IAAMA,EAAQ,SAAAC,GACJC,IAAAA,EAAOD,EACN,OAAA,IAAIE,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACPF,EAAQF,IACDD,MAIXM,EAAS,SAAAL,GAAQM,OAAAA,QAAQC,IAAsBP,kBAAAA,OAAAA,EAAlC,QAEnBF,EAAM,KAAMU,KAAKH,GACjBP,EAAM,KAAMU,KAAKH,GACjBP,EAAM,MAAMU,KAAKH","file":"task-1.03a54d68.js","sourceRoot":"..\\src","sourcesContent":["import '../css/styles.css';\r\n\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\r\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n    const time = ms;\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n          resolve(time);\r\n              }, ms);\r\n    })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger); \r\ndelay(1000).then(logger); \r\ndelay(1500).then(logger); "]}