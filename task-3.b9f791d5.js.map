{"version":3,"sources":["js/task-3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","delay","time","Promise","resolve","reject","setTimeout","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":";;;AA2CA,aA3CA,QAAA,qBAKA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAAiB,GAAdC,IAAAA,EAAAA,EAAAA,GACnBC,GADuBC,EAAAA,KACfT,EAA0B,IAAK,MACtC,OAAA,IAAIU,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACQV,KAAKE,SAAW,GAEjCM,EAAQ,CAAEJ,GAAAA,EAAIC,MAAAA,IAEdI,EAAO,CAACL,GAAAA,KAETC,MAICM,EAAa,SAAiB,GAAfP,IAAAA,EAAAA,EAAAA,GAAIC,EAAAA,EAAAA,MACvBO,QAAQC,IAAmBT,eAAAA,OAAAA,EAAmBC,kBAAAA,OAAAA,EAA9C,QAGIS,EAAW,SAAU,GAARV,IAAAA,EAAAA,EAAAA,GACjBQ,QAAQG,KAAqCX,gCAAAA,OAAAA,EAA7C,+BAGFD,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETX,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETX,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,KAC/BC,KAAKN,GACLO,MAAMJ,GAETX,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ","file":"task-3.b9f791d5.js","sourceRoot":"..\\src","sourcesContent":["import '../css/styles.css';\r\n\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\r\n// а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = ({ id, time}) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n    if (canProcess) {\r\n      resolve({ id, delay});\r\n    } else {\r\n      reject({id});\r\n    }\r\n  }, delay);\r\n});\r\n };\r\n\r\nconst logSuccess = ({id, delay}) => {\r\n  console.log(`Transaction ${id} processed in ${delay}ms`);\r\n};\r\n\r\nconst logError = ({id}) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n"]}